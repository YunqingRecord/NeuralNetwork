P = [-0.329,1; -0.71,-0.2; 0.45,1.75; 0.32,0.44; -0.3,0.85;
      1.56,1.81; 1.7,2; 1.33,1.88; 1.9,1.22; 1.91,1.9;
      0.929,1.23; 0.79,0.33; -0.335,-0.945; 0.62,0.74; -0.7,0.9;
      1.56,-0.11; -0.7,1.92; -0.73,1.74; 1.07,-0.77; -1.91,0.9];
T = [1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
P = P';

%-------------------------------------------------------------------------%
bpnet=newff(P,T, [20 2],{'logsig', 'logsig'}, 'traingdx', 'learngdm');
%建立BP神经网络， 12个隐层神经元，4个输出神经元
%tranferFcn属性 'logsig' 隐层采用Sigmoid传输函数
%tranferFcn属性 'logsig' 输出层采用Sigmoid传输函数
%trainFcn属性 'traingdx' 自适应调整学习速率附加动量因子梯度下降反向传播算法训练函数
%learn属性 'learngdm' 附加动量因子的梯度下降学习函数 
net.trainParam.epochs=2000;%允许最大训练步数2000步
net.trainParam.goal=0.001; %训练目标最小误差0.001
net.trainParam.show=100; %每间隔100步显示一次训练结果
net.trainParam.lr=0.005; %学习速率0.05
bpnet=train(bpnet,P,T);
%-------------------------------------------------------------------------
p=[-0.329,1; -0.71,-0.2; 0.45,1.75; 0.32,0.44; -0.3,0.85;
   1.56,1.81; 1.7,2; 1.33,1.88; 1.9,1.22; 1.91,1.9;
   0.929,1.23; 0.79,0.33; -0.335,-0.945; 0.62,0.74; -0.7,0.9;
   1.56,-0.11; -0.7,1.92; -0.73,1.74; 1.07,-0.77; -1.91,0.9];
p = p';
r=sim(bpnet,p);
display(r);